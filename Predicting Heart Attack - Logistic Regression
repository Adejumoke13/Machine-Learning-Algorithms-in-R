###Predicting Heart Attack Levels 

### Read the dataset into R Environment.

heart_data <- read.csv("C:\\Users\\Jeddah\\Downloads\\heartattack1.csv")
head(heart_data)
str(heart_data)
attach(heart_data)
library(wooldridge)
library(stargazer)
library(caret)
library(cvms)
library(tibble) 
View(heart_data2)

## View the summary of the dataset
summary(heart_data)
heart_data2 <- subset(heart_data, select = -c(restecg, slp,thall,cp) )
head(heart_data2)

# use first 303 rows of data
heart_data2 <- heart_data2[1:303, ]
# select variables for regression 
selected.var <- c(1:14)

## target variable Plot

barplot(table(output),col = "light blue", main = "Target variable Plot")
tt

# partition data
set.seed(2) 

# set seed for reproducing the partition

train.index <- sample(c(1:303), 182) 
train.df <- heart_data2[train.index, selected.var]
valid.df <- heart_data2[-train.index, selected.var]


###Run the logistic regression
heart.reg <- glm(output ~ ., data = train.df, family = "binomial") 
options(scipen=999)
summary(heart.reg)
stargazer(heart.reg, 
          title = "Predicting Heart Attack Levels",
          dep.var.caption = "Predictor Variables",
          notes.label = "Significance Levels", 
          type = "text", out = "heart2.txt")


varImp(heart.reg)
names(heart.reg)

### Predict the training data 
predict(heart.reg, train.df)
pred.reg2 <- predict(heart.reg, train.df, type = "response")


### Predict the Validation data
predict(heart.reg, valid.df)
pred.reg<- predict(heart.reg, valid.df, type = "response")


###Confusion Matrix
install.packages("pastecs")
library(pastecs)
stat.desc(pred.reg)

### Validation data confusion matrix
con.mat <- table(ifelse(pred.reg > 0.5,1 , 0), valid.df[,14])    
con.mat
cfm <- as_tibble(con.mat,.name_repair = ~ c("A", "B", "N"))
cfm
plot_confusion_matrix(cfm, 
                      target_col = "A", 
                      prediction_col = "B",
                      counts_col = "N", add_sums = TRUE,add_normalized = FALSE)
sum(diag(con.mat))/sum(con.mat)
round(sort(pred.reg, decreasing = T), 3)

### Training data confusion matrix
con.mat1 <- table(ifelse(pred.reg2 > 0.5,1 , 0), train.df[,14])    
con.mat1
colnames(con.mat1) <- c(0, 1)
cfm1 <- as_tibble(con.mat1,.name_repair = ~ c("Yes", "No", "N"))
cfm1
plot_confusion_matrix(cfm1, 
                      target_col = "Yes", 
                      prediction_col = "No",
                      counts_col = "N",  add_sums = TRUE, add_normalized = FALSE)
sum(diag(con.mat1))/sum(con.mat1)
round(sort(pred.reg2, decreasing = T), 3)



library(tibble)  

###ROC Curve
install.packages("InformationValue")
library(InformationValue)
plotROC(valid.df[,14], pred.reg)
confusionMatrix(valid.df[,14], pred.reg, threshold = 0.5)

misClassError(valid.df[,14], pred.reg, threshold = 0.5)


optimalCutoff(valid.df[,14], pred.reg, optimiseFor = "misclasserror",
              returnDiagnostics = TRUE)


###ROC CHART
install.packages("ROCR")
library(ROCR)
j <-data.frame(actual = valid.df[,14], predictions = pred.reg )
pred <- prediction( j$predictions, j$actual)
pred
perf <- performance(pred,"tpr","fpr")
perf
plot(perf, main="ROC curve", colorize=T)

###Gains chart
library(e1071)
library(Rcpp)
library(gains)

logit.reg.pred <- predict(heart.reg, valid.df[,-14], type = "response")
data.frame(actual = valid.df$output[1:5], predicted = logit.reg.pred[1:5])
gain <- gains(valid.df$output, logit.reg.pred, groups = 10)
class(gain)
names(gain)

data.frame(c(0,gain$cume.pct.of.total*sum(valid.df$output)) ,
           c(0,gain$cume.obs) )

data.frame( c(0,sum(valid.df$output)) , c(0, dim(valid.df)[1]) )


plot(c(0,gain$cume.pct.of.total*sum(valid.df$output))~c(0,gain$cume.obs),col="red", 
     xlab="#patients", ylab="Cumulative", main="Gains/Lift Chart", type="l")
lines(c(0,sum(valid.df$output))~c(0, dim(valid.df)[1]), lty=2, col="orange")



###Decile-Wise Charts

heights <- gain$mean.resp/mean(valid.df$output)

gain$mean.resp
gain$mean.resp*200
mean(valid.df$output)
heights

midpoints <- barplot(heights, names.arg = gain$depth, ylim = c(0,9), col = "light blue",
                     xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise chart")
text(midpoints, heights+0.5, labels=round(heights, 1), cex = 0.8, col = "red")


### Variable Selection

library(MASS)

heart.reg1 <- glm(output ~ ., data = train.df, family = "binomial") 
###STEPWISE

step1.wise <- stepAIC(heart.reg1,  trace=F)  
step1.wise$anova

###FORWARD
as.data.frame(heart.reg1)
step2.forward <- stepAIC(heart.reg1, direction = "forward", trace=T) 
step2.forward$anova
names(step1.wise)

###backward
step3.backward <- stepAIC(heart.reg1, direction= "backward", trace=T) 
step3.backward$anova


install.packages("bestglm")
library(bestglm)
bestglm(heart.reg1, IC = "AIC", family = "binomial")

###best model rerun
heart.reg2 <- glm(output ~ sex + chest.pain.type + trtbps + chol + thalachh + slope + 
                    caa + thalassemia, data = train.df, family = "binomial")

summary(heart.reg2)

###Training data 
pred.reg5 <- predict(heart.reg2, train.df, type = "response")

confmatrix <- table(ifelse(pred.reg5 > 0.5,1 , 0), train.df[,14])    
confmatrix

###Validation data 
pred.reg6 <- predict(heart.reg2, valid.df, type = "response")

confmatrix1 <- table(ifelse(pred.reg6 > 0.5,1 , 0), valid.df[,14])    
confmatrix1

plotROC(valid.df[,14], pred.reg6)
